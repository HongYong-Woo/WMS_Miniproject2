<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.top.effitopia.mapper.OrderMapper">

    <!-- Outbound와 관련된 매핑 -->
    <resultMap id="outboundResultMap" type="com.top.effitopia.domain.Outbound">
        <id property="outboundId" column="outbound_id" />
        <result property="outboundStatus" column="outbound_status" />
        <result property="regDate" column="reg_date" />
        <result property="modDate" column="mod_date" />
        <association property="order" resultMap="orderResultMap" />
    </resultMap>

    <!-- OrderDTO와 VO에 매핑 -->
    <resultMap id="orderResultMap" type="com.top.effitopia.domain.Order">
        <id property="orderId" column="order_id" />
        <result property="buyerName" column="buyer_name" />
        <result property="zipCode" column="zipcode" />
        <result property="buyerRoadName" column="buyer_road_name" />
        <result property="buyerLotNumber" column="buyer_lot_number" />
        <result property="buyerDetailAddress" column="buyer_detail_address" />
        <result property="buyerLatitude" column="buyer_latitude" />
        <result property="buyerLongitude" column="buyer_longitude" />
        <result property="buyerQuantity" column="buyer_quantity" />
        <association property="stock" javaType="Stock">
            <id property="id" column="stock_id" />
            <association property="product" javaType="Product">
                <id property="id" column="product_id" />
                <result property="productName" column="product_name" />
                <result property="productBrand" column="product_brand" />
                <result property="productWeight" column="product_weight" />
                <result property="productStorageType" column="storage_type" />
            </association>
        </association>
        <association property="member" javaType="Member">
            <id property="id" column="member_id"/>
        </association>
    </resultMap>

    <!-- 주문 등록 -->
    <insert id="insertOrder" parameterType="com.top.effitopia.domain.Order" useGeneratedKeys="true" keyProperty="orderId" keyColumn="order_id">
        INSERT INTO orders (buyer_name, zipcode, buyer_road_name, buyer_lot_number, buyer_detail_address, buyer_latitude, buyer_longitude, buyer_quantity, stock_id, member_id)
        VALUES (#{buyerName}, #{zipCode}, #{buyerRoadName}, #{buyerLotNumber}, #{buyerDetailAddress}, #{buyerLatitude}, #{buyerLongitude}, #{buyerQuantity}, #{stock.id}, #{member.id})
    </insert>

    <!-- 주문 수정 -->
    <update id="updateOrder" parameterType="com.top.effitopia.domain.Order">
        UPDATE orders
        SET buyer_name = #{buyerName}, zipcode = #{zipCode}, buyer_road_name = #{buyerRoadName}, buyer_lot_number = #{buyerLotNumber}, buyer_detail_address = #{buyerDetailAddress},
        buyer_latitude = #{buyerLatitude}, buyer_longitude = #{buyerLongitude}, buyer_quantity = #{buyerQuantity}
        WHERE order_id = #{orderId}
    </update>

    <!-- 주문 ID로 주문 조회 -->
    <select id="findById" parameterType="int" resultMap="orderResultMap">
        SELECT * FROM orders
        WHERE order_id = #{orderId}
    </select>

    <!-- Outbound 등록 -->
    <insert id="insertOutbound" parameterType="com.top.effitopia.domain.Outbound" useGeneratedKeys="true" keyProperty="outboundId" keyColumn="outbound_id">
        INSERT INTO outbound (order_id, outbound_status, reg_date)
        VALUES (#{order.orderId}, #{outboundStatus}, #{regDate})
    </insert>

    <!-- Outbound 수정 -->
    <update id="updateOutbound" parameterType="com.top.effitopia.domain.Outbound">
        UPDATE outbound
        SET outbound_status = #{outboundStatus}, mod_date = #{modDate}
        WHERE outbound_id = #{outboundId}
    </update>

    <!-- 주문 ID로 해당 Outbound 조회 -->
    <select id="findOutboundByOrderId" parameterType="int" resultMap="outboundResultMap">
        SELECT * FROM outbound WHERE order_id = #{orderId}
    </select>

    <!-- Stock ID로 Product 조회 -->
    <select id="findProductByStockId" parameterType="int" resultType="com.top.effitopia.domain.Product">
        SELECT p.*
        FROM product p
        JOIN stock s ON s.product_id = p.product_id
        WHERE s.stock_id = #{stockId}
    </select>

    <!-- Warehouse ID로 기본 출고 비용 조회 -->
    <select id="findOutboundBasicFeeByWarehouseId" parameterType="int" resultType="int">
        SELECT outbound_basic_fee
        FROM warehouse_cost
        WHERE warehouse_id = #{warehouseId}
    </select>

    <!-- Waybill 등록 -->
    <insert id="insertWaybill" parameterType="com.top.effitopia.domain.Waybill"  useGeneratedKeys="true" keyProperty="waybillId" keyColumn="waybill_id">
        INSERT INTO waybill (outbound_id, waybill_num, waybill_price, reg_date, estimated_arrival_date, waybill_status)
        VALUES (#{outbound.outboundId}, #{waybillNum}, #{waybillPrice}, #{regDate}, #{estimatedArrivalDate}, #{waybillStatus})
    </insert>


    <!-- 모든 주문을 조회하는 findAll 메서드 -->
    <select id="findAll" resultMap="orderResultMap" parameterType="map">
        SELECT o.*, s.stock_id, p.product_id, m.member_id
        FROM orders o
        JOIN stock s ON o.stock_id = s.stock_id
        JOIN product p ON s.product_id = p.product_id
        JOIN member m ON o.member_id = m.member_id
        JOIN outbound ob ON ob.order_id = o.order_id
        WHERE 1 = 1
        <if test="searchDTO.region != null and searchDTO.region != ''">
            AND (o.road_name LIKE CONCAT('%', #{searchDTO.region}, '%')
            OR o.lot_number LIKE CONCAT('%', #{searchDTO.region}, '%'))
        </if>
        <if test="searchDTO.productName != null and searchDTO.productName != ''">
            AND p.product_name = #{searchDTO.productName}
        </if>
        <if test="searchDTO.startDate != null">
            AND ob.reg_date &gt;= #{searchDTO.startDate}
        </if>
        <if test="searchDTO.endDate != null">
            AND ob.reg_date &lt;= #{searchDTO.endDate}
        </if>
        <if test="searchDTO.outboundStatus != null and searchDTO.outboundStatus != ''">
            AND ob.outbound_status = #{searchDTO.outboundStatus}
        </if>
    </select>


    <select id="getOrderCount" resultMap="orderResultMap" parameterType="map">
        SELECT count(*)
        FROM orders o
        JOIN stock s ON o.stock_id = s.stock_id
        JOIN product p ON s.product_id = p.product_id
        JOIN member m ON o.member_id = m.member_id
        JOIN outbound ob ON ob.order_id = o.order_id
        WHERE 1 = 1
        <if test="searchDTO.region != null and searchDTO.region != ''">
            AND (o.road_name LIKE CONCAT('%', #{searchDTO.region}, '%')
            OR o.lot_number LIKE CONCAT('%', #{searchDTO.region}, '%'))
        </if>
        <if test="searchDTO.productName != null and searchDTO.productName != ''">
            AND p.product_name = #{searchDTO.productName}
        </if>
        <if test="searchDTO.startDate != null">
            AND ob.reg_date &gt;= #{searchDTO.startDate}
        </if>
        <if test="searchDTO.endDate != null">
            AND ob.reg_date &lt;= #{searchDTO.endDate}
        </if>
        <if test="searchDTO.outboundStatus != null and searchDTO.outboundStatus != ''">
            AND ob.outbound_status = #{searchDTO.outboundStatus}
        </if>
    </select>


    <insert id="insertTempStock" parameterType="com.top.effitopia.domain.TempStock" useGeneratedKeys="true" keyProperty="id" keyColumn="temp_stock_id">
        INSERT INTO temp_stock (member_id, cell_id, product_id, change_amount, manufacturing_date, expiration_date)
        VALUES (#{member.id}, #{cell.id}, #{product.id}, #{changeAmount}, #{manufacturingDate}, #{expirationDate})
    </insert>

    <select id="findStockById" parameterType="int" resultType="com.top.effitopia.domain.Stock">
        SELECT * FROM stock WHERE stock_id = #{id}
    </select>
</mapper>
